<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:batch="http://www.springframework.org/schema/batch"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch.xsd">
		

	<import resource="../config/datasource-config.xml" />
	<import resource="../config/spring-config.xml" />

			<bean id="decompressStepListener" class="com.ds.listeners.DecompressStepListener"/>
			<bean id="readWriteStepListener" class="com.ds.listeners.ReadWriteStepListener"/>
				
	<job id="importProducts" xmlns="http://www.springframework.org/schema/batch">
	
		<step id="decompressWriteCsv">
			<tasklet ref="decompressWriteCsvTasklet">
			
 			<listeners>
				<listener ref="decompressStepListener"/>
			</listeners>
			
			</tasklet>

			<next on="COMPLETED" to="readCsvWriteJdbcProducts"/>
			<next on="FAILED" to="generateReport"/>
			<next on="INTERRUPTED" to="generateReport"/>

		</step>

 		<step id="readCsvWriteJdbcProducts" next="generateReport"> 
<!-- 		<step id="readCsvWriteJdbcProducts"> -->
			<tasklet>
			
 			<listeners>
				<listener ref="readWriteStepListener"/>
			</listeners>
			
				<chunk reader="reader" writer="writer" commit-interval="100"/>
			</tasklet>
		</step>

		<step id="generateReport">
			<tasklet ref="reportTasklet"/>
		</step>

 	</job>

	<bean id="decompressWriteCsvTasklet" class="com.ds.DecompressTasklet">
		<property name="inputResource" value="classpath:input/product.zip" />
		<property name="targetDirectory" value="/output/" />
		<property name="targetFile" value="products.csv" />
	</bean>

	<bean id="reportTasklet" class="com.ds.ReportTasklet"/>

 	<bean id="reader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
		<property name="resource" value="classpath:output/products.csv" />
		<property name="linesToSkip" value="1" />
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="names" value="PRODUCT_ID, NAME,DESCRIPTION,PRICE" />
						<property name="delimiter" value="," />
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean class="com.ds.ProductFieldSetMapper" />
				</property>
			</bean>
		</property>
	</bean>

 	<bean id="writer" class="com.ds.ProductJdbcItemWriter">
		<constructor-arg ref="dataSource" />
	</bean>

</beans>