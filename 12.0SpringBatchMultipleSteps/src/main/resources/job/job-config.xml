<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:batch="http://www.springframework.org/schema/batch"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch.xsd">
		
	<import resource="../config/datasource-config.xml" />
	<import resource="../config/job-context.xml" />
	
	<bean id="stepListener" class="com.ds.listeners.ProductStepListener"/>
	
	<batch:job id="importProducts" job-repository="jobRepository">
 		<batch:step id="readWriteProducts" next="readWriteBetterProducts"> 
			<batch:tasklet>
 		
 			<batch:listeners>
				<batch:listener ref="stepListener"/>
			</batch:listeners>
 		
				<batch:chunk reader="csvProductReader" processor="processor" writer="jdbcProductWriter" commit-interval="100"/>
			</batch:tasklet>
		</batch:step>
		
 		<batch:step id="readWriteBetterProducts">
			<batch:tasklet>
				<batch:chunk reader="jdbcProductReader" processor="betterProductProcessor" writer="betterProductCsvWriter" commit-interval="100"/>
			</batch:tasklet>
		</batch:step>

 	</batch:job>


	<bean id="jdbcProductReader" class="org.springframework.batch.item.database.JdbcCursorItemReader" scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="sql" value="select * from product" />
		<property name="rowMapper">
			<bean class="com.ds.ProductRowMapper" />
		</property>
	</bean>

  	<bean id="csvProductReader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
		<property name="resource" value="file:input/csv/product.csv" />
		<property name="linesToSkip" value="1" />
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="names" value="PRODUCT_ID, NAME,DESCRIPTION,PRICE" />
						<property name="delimiter" value="," />
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean class="com.ds.ProductFieldSetMapper" />
				</property>
			</bean>
		</property>
	</bean>

  	<bean id="jdbcProductWriter" class="com.ds.ProductJdbcItemWriter">
		<constructor-arg ref="dataSource" />
	</bean>

<!-- 	<bean id="betterProductItemWriter" class="org.springframework.batch.item.file.FlatFileItemWriter">
		<property name="resource" value="file:output/BetterProduct.txt" />
		<property name="lineAggregator">
			<bean class="org.springframework.batch.item.file.transform.PassThroughLineAggregator" />
		</property>
	</bean>
 -->
 <bean id="betterProductCsvWriter" class="org.springframework.batch.item.file.FlatFileItemWriter">
	  <property name="resource" value="file:output/BetterProduct.csv" />
      <property name="shouldDeleteIfExists" value="true" />
      <property name="lineAggregator">
         <bean class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
            <property name="delimiter" value="," />
            <property name="fieldExtractor">
               <bean class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
                  <property name="names" value="id, name, description, manufacturedDate" />
               </bean>
            </property>
         </bean>
      </property>
   </bean>



	<bean id="processor" class="com.ds.ProductItemProcessor"/>	
	<bean id="betterProductProcessor" class="com.ds.BetterProductItemProcessor"/>	
 	<bean id="writer" class="org.springframework.batch.item.support.ListItemWriter" />
 	
	<bean id="memoryItemReader" class="com.ds.MemoryItemReader" scope="step">
		<constructor-arg ref="writer" />
	</bean>	

   
 </beans>