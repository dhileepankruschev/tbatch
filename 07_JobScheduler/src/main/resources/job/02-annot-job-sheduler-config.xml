<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:batch="http://www.springframework.org/schema/batch"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch.xsd
		http://www.springframework.org/schema/task
    http://www.springframework.org/schema/task/spring-task.xsd
		">
		

	<import resource="../config/datasource-config.xml" />
	<import resource="../config/job-context.xml" />


	<bean id="springAnnotatedSchedulingLauncher" class="com.ds.sheduler.SpringAnnotatedSchedulingLauncher">
		<property name="job" ref="importProducts" />
		<property name="jobLauncher" ref="jobLauncher" />
	</bean>
	
	
	<task:scheduler id="scheduler" pool-size="10"/>
	<task:annotation-driven scheduler="scheduler" />
	


	<batch:job id="importProducts">
	
		<batch:listeners>
		<!-- 
			<batch:listener ref="productsJobListener"/>
		-->
			<batch:listener ref="annotatedroductsJobListener"/>
		</batch:listeners>
		
		<batch:step id="readWriteProducts">
			<batch:tasklet>
				<batch:chunk reader="reader" writer="writer" processor="itemProcessor" commit-interval="100" skip-limit="2">
					<batch:skippable-exception-classes>
						<batch:include class="org.springframework.batch.item.file.FlatFileParseException" />
					</batch:skippable-exception-classes>
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
	</batch:job>

	<bean id="itemProcessor" class="com.ds.CustomItemProcessor" />
	<bean id="productsJobListener" class="com.ds.listeners.ProductsJobListener"/>
	<bean id="annotatedroductsJobListener" class="com.ds.listeners.AnnotatedProductsJobListener"/>
	
 	<bean id="reader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
		<property name="resource" value="file:input/csv/product.csv" />
		<property name="linesToSkip" value="1" />
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="names" value="PRODUCT_ID, NAME,DESCRIPTION,PRICE" />
						<property name="delimiter" value="," />
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean class="com.ds.ProductFieldSetMapper" />
				</property>
			</bean>
		</property>
	</bean>

 	<bean id="writer" class="com.ds.ProductJdbcItemWriter">
		<constructor-arg ref="dataSource" />
	</bean>

</beans>